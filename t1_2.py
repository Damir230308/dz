"""
Задание 2.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для второго скрипта
"""
# Задание с курса Основы Python
# Про что оно: 2. Дан список: ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
# Необходимо его обработать — обособить каждое целое число (вещественные не трогаем) кавычками (добавить кавычку до и кавычку после элемента списка, являющегося числом)
# и дополнить нулём до двух целочисленных разрядов: ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха', 'была', '"', '+05', '"', 'градусов']
from memory_profiler import profile
import cProfile

my_list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
@profile
def wrapper():
    def lst(my_list):
        for _ in range(len(my_list)):

            element = my_list.pop(0)

            if element.isdigit():
                my_list.extend(['"', '{:02}'.format(int(element)), '"'])
            elif element[0] == '+' and element[1].isdigit():
                my_list.extend(['"', '{:02}'.format(int(element)), '"'])
            else:
                my_list.append(element)
@profile
def lst1(my_list):
    for _ in range(len(my_list)):

        element = my_list.pop(0)

        if element.isdigit():
            my_list.extend(['"', '{:02}'.format(int(element)), '"'])

        elif element[0] == '+' and element[1].isdigit():
            my_list.extend(['"', '{:02}'.format(int(element)), '"'])

        else:
            my_list.append(element)

# print(' '.join(my_list))
# print(' '.join(my_list))

cProfile.run(lst1(my_list))
cProfile.run(wrapper())

"""
Замеры:
---------------------------------------------------------------------------------------------------------
неоптимизированный код:
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    42     19.6 MiB     19.6 MiB           1   @profile
    43                                         def lst1(my_list):
    44     19.6 MiB      0.0 MiB          11       for _ in range(len(my_list)):
    45                                         
    46     19.6 MiB      0.0 MiB          10           element = my_list.pop(0)
    47                                         
    48     19.6 MiB      0.0 MiB          10           if element.isdigit():
    49     19.6 MiB      0.0 MiB           2               my_list.extend(['"', '{:02}'.format(int(element)), '"'])
    50                                         
    51     19.6 MiB      0.0 MiB           8           elif element[0] == '+' and element[1].isdigit():
    52     19.6 MiB      0.0 MiB           1               my_list.extend(['"', '{:02}'.format(int(element)), '"'])
    53                                         
    54                                                 else:
    55     19.6 MiB      0.0 MiB           7               my_list.append(element)
---------------------------------------------------------------------------------------------------------
оптимизированный код:
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    29     19.5 MiB     19.5 MiB           1   @profile
    30                                         def wrapper():
    31     19.5 MiB      0.0 MiB           1       def lst(my_list):
    32                                                 for _ in range(len(my_list)):
    33                                         
    34                                                     element = my_list.pop(0)
    35                                         
    36                                                     if element.isdigit():
    37                                                         my_list.extend(['"', '{:02}'.format(int(element)), '"'])
    38                                                     elif element[0] == '+' and element[1].isdigit():
    39                                                         my_list.extend(['"', '{:02}'.format(int(element)), '"'])
    40                                                     else:
    41                                                         my_list.append(element)
---------------------------------------------------------------------------------------------------------
По моему личному мнению мне кажется что вполне удалось оптимизировать мой код, потому в оптимизированном коде,
мы замеряем внешнюю ф-цию, а знаычит тратится меньше памяти. В слечае с неоптимизированным кодом мытратим память на
операции внутренней ф-ции, если посмотреть на отчёты профайлера, то увидим куда и сколько выделяется памяти.
Сугубо моё мнение если что-то не так напишите комментарий, учту его.

Что было сделано: Для того чтобы уменьшить расходы я лишь обернул ф-цию ф-цей. 
"""
